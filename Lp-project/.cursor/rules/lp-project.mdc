---
description: 
globs: 
alwaysApply: true
---
# LP판 사이트 개발 규칙

---

## 1. 기술 스택 및 기본 설정

*   주요 기술 스택은 React, TypeScript, Tailwind CSS를 사용합니다.
*   프로젝트 설정 시 Create React App, Vite 또는 Next.js와 같은 React 프레임워크를 사용하며, TypeScript 및 Tailwind CSS가 올바르게 설정되었는지 확인합니다.
*   패키지 관리는 npm을 사용합니다.

## 2. 백엔드 API 연동

*   백엔드 API 통신 시에는 [https://umc-8th-be.log8.kr/docs](mdc:https:/umc-8th-be.log8.kr/docs) 문서를 기준으로 개발합니다.
*   API 호출 로직은 별도의 서비스 또는 유틸리티 함수로 분리하여 관리합니다.
*   비동기 데이터 로딩 상태(**로딩 중, 성공, 에러**)를 컴포넌트에서 명확하게 처리합니다. 로딩 스피너, 에러 메시지 등을 사용자에게 제공합니다.
*   API 응답 데이터의 유효성을 검사하고 필요한 경우 타입 변환을 수행합니다.

## 3. 인증 및 권한 관리

*   **Google OAuth 로그인:** 백엔드에서 인증 처리를 담당하므로, 프론트엔드에서는 Google OAuth 로그인 UI 및 백엔드 인증 API 연동 부분만 구현합니다.
*   **토큰 관리:** 토큰 관련 설정 및 관리는 백엔드에서 이루어지며, 프론트엔드는 백엔드에서 제공하는 토큰을 활용하여 API 요청 시 인증 정보를 전달하는 부분만 구현합니다.
*   **Protected Route:** React Router 등을 활용하여 로그인한 사용자만 접근 가능한 페이지(Protected Route)와 로그인 여부와 관계없이 접근 가능한 페이지를 명확히 구분하여 구현합니다. 사용자 인증 상태에 따라 적절한 페이지로 리다이렉트 처리를 해야 합니다.

## 4. 데이터 유효성 검사

*   **Zod 활용:** 회원가입 및 로그인 등 사용자 입력을 받는 부분에서는 Zod 라이브러리를 활용하여 데이터 유효성 검사를 수행합니다. 스키마를 정의하여 데이터의 형식을 보장하고 타입 안정성을 높입니다.

## 5. 컴포넌트 설계 및 개발

*   **원자적 디자인(Atomic Design) 원칙** 또는 유사한 컴포넌트 기반 개발 철학을 따릅니다. 작고 재사용 가능한 컴포넌트(Atoms)부터 시작하여 복잡한 컴포넌트(Molecules, Organisms) 및 페이지(Templates, Pages)로 구성합니다.
*   **단일 책임 원칙(Single Responsibility Principle)**을 준수하여 각 컴포넌트가 하나의 명확한 기능 또는 역할을 수행하도록 합니다.
*   컴포넌트는 `src/components`, `src/pages`, `src/` 등 역할에 따라 논리적으로 분류하여 디렉토리를 구성합니다.
*   Props를 통해 데이터를 전달하고, 이벤트 핸들러를 통해 부모 컴포넌트와 통신합니다. Props drilling을 피하기 위해 상태 관리 라이브러리(Zustand)를 사용합니다.
*   컴포넌트 내부에서 직접적인 DOM 조작은 최소화하고 React의 선언적인 방식을 따릅니다.
*   각 컴포넌트 파일에는 해당 컴포넌트와 관련된 모든 로직(상태 관리, 이벤트 핸들러 등)과 마크업이 포함되도록 합니다.
*   layout을 적극적으로 활용

## 6. 데이터 Fetching 및 상태 관리

*   **React Query (TanStack Query) 활용:** `useQuery`를 사용하여 서버 상태를 효율적으로 관리하고 데이터를 가져옵니다. 무한 스크롤 등 목록 형태의 데이터는 `useInfiniteQuery`를 활용하여 구현합니다.
*   **데이터 변경 처리:** `useMutation`을 사용하여 서버 데이터 변경을 처리하며, 사용자 경험 향상을 위해 Optimistic Update를 적극적으로 활용합니다.
*   **Debouncing 및 Throttling:** 검색 입력, 스크롤 이벤트 등 빈번하게 발생하는 이벤트 처리 시 성능 최적화를 위해 필요에 따라 Debouncing 또는 Throttling 기법을 사용합니다.

## 7. TypeScript 활용

*   모든 컴포넌트 Props, 상태(State), API 응답/요청 데이터 등에 명확한 타입을 정의하여 사용합니다. 인터페이스(`interface`) 또는 타입 별칭(`type`)을 활용합니다.
*   함수의 매개변수 및 반환 값에 타입을 명시하여 코드의 가독성과 안정성을 높입니다.
*   `any` 타입 사용은 최소화하고, 부득이한 경우 명확한 사유와 함께 사용합니다.

## 8. Tailwind CSS 스타일링

*   스타일은 주로 Tailwind CSS 유틸리티 클래스를 사용하여 인라인으로 적용합니다.
*   반복되는 스타일 패턴은 `@apply` 지시어를 사용하여 커스텀 유틸리티 클래스를 생성하거나, 컴포넌트별 스타일 파일을 분리하여 관리합니다.
*   반응형 디자인은 Tailwind CSS의 내장된 반응형 유틸리티(`sm:`, `md:`, `lg:`, `xl:`)를 활용합니다.
*   디자인 시스템 가이드가 있다면 이를 따르고, 없다면 Tailwind CSS 설정을 커스터마이징하여 프로젝트의 디자인 일관성을 유지합니다.
*   색상, 타이포그래피, 간격 등 디자인 토큰은 `tailwind.config.js` 파일에서 관리합니다.

## 9. 코드 품질 및 유지보수성

*   **주석:** 기존 MDC 규칙을 참고하여 컴포넌트, 인터페이스, 함수 등에 JSDoc 스타일의 주석을 충실히 작성합니다. 특히 컴포넌트의 역할, Props 설명, 예시 등을 명확하게 작성하여 다른 개발자가 쉽게 이해하고 사용할 수 있도록 합니다.
*   **네이밍:** 변수, 함수, 컴포넌트 등의 이름은 명확하고 설명적이며 일관성 있게 작성합니다. 카멜 케이스(camelCase) 또는 파스칼 케이스(PascalCase) 등 프로젝트 컨벤션을 따릅니다.
*   **코드 포맷팅:** Prettier 또는 ESLint와 같은 도구를 사용하여 코드 포맷을 자동화하고 일관성을 유지합니다.
*   **린팅:** ESLint와 같은 도구를 사용하여 코드의 잠재적 문제점들을 미리 식별하고 수정합니다. React 및 TypeScript 관련 규칙을 활성화합니다.
*   **데드 코드 제거:** 사용되지 않는 코드, 주석, 파일 등을 정기적으로 정리하여 코드베이스를 깔끔하게 유지합니다.
*   **주석:** 주석은 최대한 자세하게 한글로 설명해줘! 나중에 다시 보더라도 수정할 수 있을 만큼

## 10. Git & 협업

*   Git을 사용하여 버전 관리를 수행하며, 명확한 커밋 메시지 규칙을 따릅니다.
*   기능별 브랜치를 생성하고, Pull Request(PR) 또는 Merge Request(MR)를 통해 코드 리뷰 프로세스를 거칩니다.
*   충돌 발생 시 책임감을 가지고 해결합니다.

## 11. 성능 최적화

*   이미지 최적화, 코드 스플리팅, 지연 로딩(Lazy Loading) 등을 고려하여 초기 로딩 속도 및 전반적인 성능을 개선합니다.
*   불필요한 리렌더링을 방지하기 위해 `React.memo`, `useMemo`, `useCallback` 등을 적절히 사용합니다.

## 12. 테스트 (선택 사항이지만 권장)

*   Jest, React Testing Library 등을 사용하여 컴포넌트 및 중요한 로직에 대한 단위/통합 테스트 코드를 작성합니다.


*   API 연동 부분에 대한 테스트를 고려합니다.